---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { Image } from "astro:assets";
import { render, getCollection, type CollectionEntry } from "astro:content";
import SquareAppointments from "../../components/SquareAppointments.astro";

const isAsset = (v: unknown) => typeof v === "object" && v !== null && "src" in (v as any);

export async function getStaticPaths() {
  // const artists = await getCollection("artists");
  let artists = (await getCollection("artists")) as CollectionEntry<"artists">[];
  artists = artists.sort((a, b) =>
    a.data.order - b.data.order || a.data.title.localeCompare(b.data.title)
  );
  return artists.map((entry) => ({
    params: { slug: entry.id },
    props: { entry }
  }));
}

const { entry } = Astro.props;

// Render the Markdown *body* (the part after the frontmatter)
const { Content } = await render(entry);
---
<BaseLayout title={`BluTattoo Studio â€” ${entry.data.title}`}>
  <article class="mx-auto max-w-3xl space-y-6">
    <header class="space-y-2 flex items-center gap-4">

      <!-- {entry.data.photo && (
        <Image src={entry.data.photo} alt={`Portrait of ${entry.data.title}`} width={200} height={200} class="rounded-full" />
      )} -->

      {entry.data.photo && (
        isAsset(entry.data.photo)
          ? <Image src={entry.data.photo as any} alt={`Portrait of ${entry.data.title}`} width={200} height={200} class="rounded-full" />
          : <img src={entry.data.photo as string} alt={`Portrait of ${entry.data.title}`} width="200" height="200" class="rounded-full" loading="lazy" decoding="async" />
      )}

      <div>
        <h1 class="text-3xl font-bold">{entry.data.title}</h1>
        {entry.data.styles?.length && (
          <p class="text-gray-600">{entry.data.styles.join(", ")}</p>
        )}
  
        {entry.data.instagram && (
          <p>
            <a
              href={entry.data.instagram}
              target="_blank"
              rel="noopener noreferrer"
              class="inline-flex items-center gap-2 text-indigo-600 hover:underline"
            >
              <!-- tiny IG glyph -->
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                   fill="currentColor" class="h-4 w-4" aria-hidden="true">
                <path d="M7.75 2h8.5A5.75 5.75 0 0 1 22 7.75v8.5A5.75 5.75 0 0 1 16.25 22h-8.5A5.75 5.75 0 0 1 2 16.25v-8.5A5.75 5.75 0 0 1 7.75 2Zm0 1.5A4.25 4.25 0 0 0 3.5 7.75v8.5A4.25 4.25 0 0 0 7.75 20.5h8.5a4.25 4.25 0 0 0 4.25-4.25v-8.5A4.25 4.25 0 0 0 16.25 3.5h-8.5ZM12 7a5 5 0 1 1 0 10 5 5 0 0 1 0-10Zm0 1.5a3.5 3.5 0 1 0 0 7 3.5 3.5 0 0 0 0-7ZM17 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2Z"/>
              </svg>
              Instagram
            </a>
          </p>
        )}
    
        {entry.data.bio && (
          <section>
            <h2 class="sr-only">Bio</h2>
            <p class="whitespace-pre-line">{entry.data.bio}</p>
          </section>
        )}
      </div>
    </header>

    <!-- {entry.data.images?.length && (
      <section aria-label="Portfolio" class="grid grid-cols-2 md:grid-cols-3 gap-3">
        {entry.data.images.map((img) => (
          <figure class="overflow-hidden rounded">
            <img
              src={`${img.src}?w=800&auto=format`}
              srcset={`${img.src}?w=400 400w, ${img.src}?w=800 800w, ${img.src}?w=1200 1200w`}
              sizes="(max-width: 768px) 50vw, 33vw"
              alt={img.alt ?? ""}
              loading="lazy"
              decoding="async"
              class="h-full w-full object-cover"
            />
          </figure>
        ))}
      </section>
    )} -->

    {entry.data.images?.length && (
      <section class="grid grid-cols-2 md:grid-cols-3 gap-3">
        {entry.data.images.map((img) => (
          <figure class="overflow-hidden rounded">
            {isAsset(img.src)
              ? <Image src={img.src as any} alt={img.alt ?? ""} width={800} height={600} class="h-full w-full object-cover" />
              : <img src={img.src as string} alt={img.alt ?? ""} loading="lazy" decoding="async" class="h-full w-full object-cover" />
            }
          </figure>
        ))}
      </section>
    )}    

    {/* Preferred: Square embed if present */}
    {entry.data.square && (
      <SquareAppointments
        merchantSlug={entry.data.square.merchantSlug}
        locationSlug={entry.data.square.locationSlug}
        label={entry.data.square.label}
        className="mt-2"
      />
    )}

    {/* Fallback: a plain external booking link */}
    {!entry.data.square && entry.data.booking_link && (
      <p>
        <a href={entry.data.booking_link} target="_blank" rel="noopener noreferrer"
          class="inline-block rounded bg-indigo-600 px-4 py-2 text-white hover:bg-indigo-700">
          Book with {entry.data.title}
        </a>
      </p>
    )}

    {/* Markdown body content (the part after the --- in the file) */}
    <section class="prose max-w-none">
      <Content />
    </section>
  </article>
</BaseLayout>
